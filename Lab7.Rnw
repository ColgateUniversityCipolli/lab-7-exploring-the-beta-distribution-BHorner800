\documentclass{article}
\usepackage{amsmath} %This allows me to use the align functionality.
                     %If you find yourself trying to replicate
                     %something you found online, ensure you're
                     %loading the necessary packages!
\usepackage{amsfonts}%Math font
\usepackage{graphicx}%For including graphics
\usepackage{hyperref}%For Hyperlinks
\usepackage[shortlabels]{enumitem}% For enumerated lists with labels specified
                                  % We had to run tlmgr_install("enumitem") in R
\hypersetup{colorlinks = true,citecolor=black} %set citations to have black (not green) color
\usepackage{natbib}        %For the bibliography
\setlength{\bibsep}{0pt plus 0.3ex}
\bibliographystyle{apalike}%For the bibliography
\usepackage[margin=0.50in]{geometry}
\usepackage{float}
\usepackage{multicol}

%fix for figures
\usepackage{caption}
\newenvironment{Figure}
  {\par\medskip\noindent\minipage{\linewidth}}
  {\endminipage\par\medskip}
\begin{document}

\vspace{-1in}
\title{Lab 07 -- MATH 240 -- Computational Statistics}

\author{
  Ben Horner \\
  Colgate University  \\
  Math Department  \\
  {\tt email@domain}
}

\date{March 13, 2025}

\maketitle

\begin{multicols}{2}
\begin{abstract}
The beta distribution is useful in modeling probabilities, rates, and other proportion as it and it's key characteristics (mean, variance, skewness, excess kurtosis) are easily defined and calculated. However, when taking a sample of random data, we must estimate those key characteristics. Here, we seek to examine those estimations and compare them to the population-level statistics, find that an increase in sample size will result in the estimated value approaching the population-level. On top of that, the sampling distributions follow a normal distribution around the population-level value.
\end{abstract}

\noindent \textbf{Keywords:} Beta Distribution; Probability Density; Moments; Sample Size; Variation

\section{Introduction}
The beta distribution is a continuous distribution that is used to model a random variable X that ranges from 0 to 1. This makes it useful for modeling proportions, probabilities, or rates. The beta distribution is also known for being remarkably flexible with regards to its shape --- it can be left-skewed, right-skewed, or symmetric depending on the value of the parameters that define its shape: $\alpha > 0$ and $\beta > 0$. We can use these parameters alone to not only define the distribution, but calculate the mean, variance, skewness, and excess kurtosis. Additionally, using the centered and uncentered moments of the beta distribution is another way to calculate these population-level characteristics.

However, often times we may not have access to the beta, alpha, or moment of the distribution, and thus need to approximate it based off of the data. As such, we will examine whether data summaries help, is the sample size important, and also model the variation of the data summaries when compared to the population-level values. 


\section{Methods}
The mean, variance, skewness, and excess kurtosis of a distribution are key summary characteristics that tell us more about the data we are looking at. With a beta distribution, we can calculate the population-level values using either the $\alpha$ and $\beta$ or the moments. Throughout this process, we load and use the following libraries: \texttt{ggplot2} \citep{ggplot2} and \texttt{patchwork} \citep{patchwork} for plotting and visualizing data, \texttt{tidyverse} \citep{tidyverse} to manipulate and summarize data, and \texttt{e1071} \citep{e1071} and \texttt{cumstats} \citep{cumstats} for additional statistical functions and analysis. 

\subsection{Describing and Summarizing The Population}
As the beta distribution's probability density function is defined in terms of the parameters $\alpha$ and $\beta$, the population-level characteristics are similarly defined by them. Using a function we created to summarize the mean, variance, skewness, and excess kurtosis (hereafter referred to as key characteristics) and a function to plot a beta distribution, compared to a Gaussian, we considered four cases: 
Beta($\alpha = 2, \beta = 5$), Beta($\alpha = 5, \beta = 5$), Beta($\alpha = 5, \beta = 2$), and Beta($\alpha = 0.50, \beta = 0.50$). 
To confirm our function works, we also computed the population-level key characteristics via the moments of the beta distribution, which match those using alpha and beta.

<<echo = F, size="scriptsize", eval=T, message=F, warning=F>>=
#############################################################################
#Libraries
#############################################################################
library(ggplot2)
library(tidyverse)
library(e1071)
library(cumstats)
library(patchwork)
#############################################################################
#Task 1: Describe The Population Distribution
#############################################################################
summarize.beta = function(alpha, beta){
  ab.values = paste(c(alpha,beta), collapse = ",")
  mean = (alpha)/(alpha + beta)
  var = (alpha*beta)/(((alpha + beta)^2)*(alpha + beta + 1))
  skew = (2*(beta - alpha)*sqrt(alpha + beta + 1))/((alpha + beta + 2)*sqrt(alpha*beta))
  kurt = 6*((alpha-beta)^2 * (alpha + beta + 1) - alpha*beta*(alpha + beta + 2))/(
    alpha*beta*(alpha + beta + 2)*(alpha + beta + 3))
  
  beta.summaries = data.frame(beta_distribution = ab.values, 
                              mean = mean,
                              varience = var,
                              skewness = skew,
                              excess_kurtosis = kurt)
  return(beta.summaries)
}

plot.beta = function(alpha, beta){
  fig.dat <- tibble(x = seq(-0.25, 1.25, length.out=1000))|>   # generate a grid of points
    mutate(beta.pdf = dbeta(x, alpha, beta),                      # compute the beta PDF
           norm.pdf = dnorm(x,                                    # Gaussian distribution with
                            mean = alpha/(alpha+beta),            # same mean and variance
                            sd = sqrt((alpha*beta)/((alpha+beta)^2*(alpha+beta+1)))))
  
  ggplot(data= fig.dat)+                                              # specify data
    geom_line(aes(x=x, y=beta.pdf, color="Beta")) +                 # plot beta dist
    geom_line(aes(x=x, y=norm.pdf, color="Gaussian(0.2857, 0.0255)")) +  # plot guassian dist
    geom_hline(yintercept=0)+                                            # plot x axis
    theme_bw()+                                                          # change theme
    xlab("x")+                                                           # label x axis
    ylab("Density")+                                                     # label y axis
    scale_color_manual("", values = c("black", "grey"))+                 # change colors
    theme(legend.position = "bottom")+
    ggtitle(paste("Beta (alpha=", alpha, ", beta=", beta, ")"))
}

#List of alpha beta pairs to loop through
alpha.list = c(2, 5, 5, 0.5)
beta.list = c(5, 5, 2, 0.5)
beta.summaries = data.frame()
beta.plots = list()

#Loop must be of same length as list of alpha and beta
for (i in 1:4){ 
  alpha = alpha.list[i]
  beta = beta.list[i]
  new.row = summarize.beta(alpha, beta)
  beta.summaries = rbind(beta.summaries, new.row) #saves the summaries of each beta
  new.plot = plot.beta(alpha, beta)
  beta.plots[[i]] = new.plot #saves each beta plot as an element in this list
}

p1 = plot.beta(2, 5)
p2 = plot.beta(5, 5)
p3 = plot.beta(5, 2)
p4 = plot.beta(0.5, 0.5)
(p1+p2)/(p3+p4)

#############################################################################
#Task 2: Compute the moments
#############################################################################
#creating the integrans for centered and uncentered functions
uncent.integrand = function(x, alpha, beta, k){
  (x^k)*dbeta(x, shape1 = alpha, shape2 = beta)
}
cent.integrand = function(x, alpha, beta, k){
  ux = integrate(uncent.integrand, lower = 0, upper = 1, alpha = alpha, beta = beta, k = 1)$value
  ((x-ux)^k) * dbeta(x, shape1 = alpha, shape2 = beta)
}

#calculating the centered and uncentered beta moment
beta.moment = function(alpha, beta, k, centered = T){
  #uncentered moment
  if (centered == F){
    uncent.moment = integrate(uncent.integrand, lower = 0, upper = 1, alpha = alpha, beta = beta, k = k)
    return(uncent.moment$value)
  }
  #centered moment
  if (centered == T){
    cent.moment = integrate(cent.integrand, lower = 0, upper = 1, alpha = alpha, beta = beta, k = k)
    return(cent.moment$value)
  }
}

#calculating population-level characteristics using the moment
pop.chars = function(alpha, beta){ 
  mean = beta.moment(alpha, beta, 1, F)
  var = beta.moment(alpha, beta, 2)
  skew = (beta.moment(alpha, beta, 3))/((beta.moment(alpha, beta, 2))^1.5)
  kurt = (beta.moment(alpha, beta, 4)/(beta.moment(alpha, beta, 2)^2))-3
  results = c(mean, var, skew, kurt)
  return(results)
}
@

% latex table generated in R 4.4.2 by xtable 1.8-4 package
% Thu Mar 13 12:12:36 2025
\begin{table}[H]
\centering
\resizebox{\columnwidth}{!}{  % Resize the table to fit the text width
\begin{tabular}{rlrrrr}
  \hline
 & beta\_distribution & mean & varience & skewness & excess\_kurtosis \\ 
  \hline
1 & 2,5 & 0.29 & 0.03 & 0.60 & -0.12 \\ 
  2 & 5,5 & 0.50 & 0.02 & 0.00 & -0.46 \\ 
  3 & 5,2 & 0.71 & 0.03 & -0.60 & -0.12 \\ 
  4 & 0.5,0.5 & 0.50 & 0.12 & 0.00 & -1.50 \\ 
   \hline
\end{tabular}
} % End of resizebox
\caption{Summary of Beta Distribution Parameters}
\end{table}

\subsection{Summarizing Random Data}
When summarizing data, our goal is to approximate what the population distribution might be. We test this by generating a sample of $n = 500$ from each of the considered beta distributions using \texttt{set.seed(7272)} to ensure consistency across samples and attempts. We summarize the data using \texttt{summarize()} from \texttt{dplyr} \citep{tidyverse} and plot a histogram of the generated sample and its estimated density (red) compared to the population level beta function for the same alpha and beta (blue).
<<echo = F, size="scriptsize", eval=T, message=F, warning=F>>=
beta.sample.summary = function(alpha, beta, seed){
  set.seed(seed) # Set seed so we all get the same results.
  sample.size <- 500 # Specify sample details
  beta.sample <- rbeta(n = sample.size,  # sample size
                       shape1 = alpha,   # alpha parameter
                       shape2 = beta)    # beta parameter
  
  beta.sample.tibble = tibble(values = beta.sample) %>%
    summarize(mean = mean(beta.sample),
              variance = var(beta.sample),
              skewness = skewness(beta.sample),
              kurtosis = kurtosis(beta.sample)
              
    )
  df <- data.frame(beta_sample = beta.sample) #makes it into df instead of vector. 
  #Plotting
  ggplot(df, aes(x = beta_sample)) + #assigns the data as the data frame and aes = x asis
    geom_histogram(aes(y=after_stat(density)), binwidth = 0.05, fill = "lightblue", color = "black") + #makes histogram
    geom_density(color = "red", size = 1) +  #Density curve
    stat_function(fun = dbeta, args = list(shape1 = alpha, shape2 = beta), color = "blue", size = 1) +  #True prob density
    labs(title = paste("Beta(alpha=", alpha, ", beta=", beta, ")"), #titles and axis labels
         x = "Beta Distribution Values", 
         y = "Probability Density")
}


p1 = (beta.sample.summary(2, 5, 7272)) #testing it
p2 = (beta.sample.summary(5, 5, 7272))
p3 =(beta.sample.summary(5, 2, 7272))
p4 =(beta.sample.summary(0.5, 0.5, 7272))
(p1+p2)/(p3+p4)
@

\subsection{Modeling Variation in Data Samples}
When taking a random sample of data, each sample varies from the last. As our goal is to model sampled data with a population-level distribution, we examine how our estimations of the key characteristics vary from sample to sample. Beginning with our set seed of 7272 to generate the random sample, we iterate $(1:1000)$ through seeds 7272+i, where i is the iteration. Our result is a sample of $n = 1000$ means, variances, skewnesses, and excess kurtosises, which we plot to examine their distribution.

<<echo = F, size="scriptsize", eval=T, message=F, warning=F>>=

beta.sample.summary = function(alpha, beta, seed, n){
  '
  input -> alpha, beta, seed, n (number of samples
  output -> beta sample summary (mean, var, skew, kurt)
  '
  set.seed(seed) # Set seed so we all get the same results.
  sample.size <- n # Specify sample details
  beta.sample <- rbeta(n = sample.size,  # sample size
                       shape1 = alpha,   # alpha parameter
                       shape2 = beta)    # beta parameter
  
  beta.sample.tibble = tibble(values = beta.sample) %>%
    summarize(mean = mean(beta.sample),
              variance = var(beta.sample),
              skewness = skewness(beta.sample),
              excess_kurtosis = kurtosis(beta.sample))-3
  return(beta.sample.tibble)
}

#Looping Through sample to see variance in data
n = 500 #sample size
a = 2 #alpha
b = 5 #beta
seed = 7272
stats.summary = data.frame() #where we are going to be storing the data

for (i in 1:1000){
  seed = 7272 + i
  new.row = beta.sample.summary(a, b, seed, n)
  stats.summary = rbind(stats.summary, new.row) #saves the summaries of each beta
}


plot.mean = ggplot(stats.summary, aes(x = mean)) + #assigns the data as the data frame and aes = x asis
  geom_histogram(aes(y=after_stat(density)), binwidth = 0.005, fill = "lightblue", color = "black") + #makes histogram
  geom_density(color = "red", size = 1) +  #Density curve
  labs(title = "Mean", #titles and axis labels
       x = "Value of Statistic", 
       y = "Count")

plot.var = ggplot(stats.summary, aes(x = variance)) + #assigns the data as the data frame and aes = x asis
  geom_histogram(aes(y=after_stat(density)), binwidth = 0.001, fill = "lightblue", color = "black") + #makes histogram
  geom_density(color = "red", size = 1) +  #Density curve
  labs(title = "Variance", #titles and axis labels
       x = "Value of Statistic", 
       y = "Count")

plot.skew = ggplot(stats.summary, aes(x = skewness)) + #assigns the data as the data frame and aes = x asis
  geom_histogram(aes(y=after_stat(density)), binwidth = 0.05, fill = "lightblue", color = "black") + #makes histogram
  geom_density(color = "red", size = 1) +  #Density curve
  labs(title = "Skewness", #titles and axis labels
       x = "Value of Statistic", 
       y = "Count")

plot.kurt = ggplot(stats.summary, aes(x = excess_kurtosis)) + #assigns the data as the data frame and aes = x asis
  geom_histogram(aes(y=after_stat(density)), binwidth = 0.05, fill = "lightblue", color = "black") + #makes histogram
  geom_density(color = "red", size = 1) +  #Density curve
  labs(title = "Excess Kurtosis", #titles and axis labels
       x = "Value of Statistic", 
       y = "Count")

stat.plot.summary = (plot.mean + plot.var) / (plot.skew + plot.kurt)
stat.plot.summary
@


\section{Discussion}
When analyzing data, the key characteristics can provide essential summaries to guide one's research. However, often we only have a sample of the population instead of access to the true parameters of a distribution and as such, we estimate the key parameters. These summaries do help, and especially as the sample size increases, it approaches the true values for the population. Additionally, the sampling distribution of the beta function's key characteristics appear to follow normal (gaussian) distribution itself, with the standard deviation and spread of the sampling distribution increasing from the mean to varaiance, to skewness, and finally excess kurtosis. In the future, this will allow us to determine the accuracy of such estimated characteristics. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Bibliography
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\vspace{2em}

\noindent\textbf{Bibliography:} Note that when you add citations to your bib.bib file \emph{and}
you cite them in your document, the bibliography section will automatically populate here.

\begin{tiny}
\bibliography{bib}
\end{tiny}
\end{multicols}


\end{document}